# -*- mode: text; eval: (auto-fill-mode 0);  -*-
#
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                      org.biobank.controllers.Application.index

#
# --- VALUE OBJECTS ---
#
GET     /studies/counts                        org.biobank.controllers.study.StudiesController.studyCounts()
GET     /studies/valuetypes                    org.biobank.controllers.study.StudiesController.valueTypes
GET     /studies/anatomicalsrctypes            org.biobank.controllers.study.StudiesController.anatomicalSourceTypes
GET     /studies/specimentypes                 org.biobank.controllers.study.StudiesController.specimenTypes
GET     /studies/preservtypes                  org.biobank.controllers.study.StudiesController.preservTypes
GET     /studies/preservtemptypes              org.biobank.controllers.study.StudiesController.preservTempTypes
GET     /studies/sgvaluetypes                  org.biobank.controllers.study.StudiesController.specimenGroupValueTypes

#
# --- COLLECTION EVENT TYPES ---
#
GET     /studies/cetypes/:studyId                              org.biobank.controllers.study.CeventTypeController.get(studyId, cetId: Option[String])
POST    /studies/cetypes/:studyId                              org.biobank.controllers.study.CeventTypeController.add(studyId)
DELETE  /studies/cetypes/:studyId/:id/:ver                     org.biobank.controllers.study.CeventTypeController.remove(studyId, id, ver: Long)
GET     /studies/cetypes/inuse/:id                             org.biobank.controllers.study.CeventTypeController.inUse(id)
POST    /studies/cetypes/name/:id                              org.biobank.controllers.study.CeventTypeController.updateName(id)
POST    /studies/cetypes/description/:id                       org.biobank.controllers.study.CeventTypeController.updateDescription(id)
POST    /studies/cetypes/recurring/:id                         org.biobank.controllers.study.CeventTypeController.updateRecurring(id)
POST    /studies/cetypes/spcspec/:id                           org.biobank.controllers.study.CeventTypeController.addSpecimenSpec(id)
POST    /studies/cetypes/spcspec/:id/:uniqueId                 org.biobank.controllers.study.CeventTypeController.updateSpecimenSpec(id, uniqueId)
DELETE  /studies/cetypes/spcspec/:studyId/:id/:ver/:uniqueId   org.biobank.controllers.study.CeventTypeController.removeSpecimenSpec(studyId, id, ver: Long, uniqueId)
POST    /studies/cetypes/annottype/:id                         org.biobank.controllers.study.CeventTypeController.addAnnotationType(id)
POST    /studies/cetypes/annottype/:id/:uniqueId               org.biobank.controllers.study.CeventTypeController.updateAnnotationType(id, uniqueId)
DELETE  /studies/cetypes/annottype/:studyId/:id/:ver/:uniqueId org.biobank.controllers.study.CeventTypeController.removeAnnotationType(studyId, id, ver: Long, uniqueId)

#
# --- PROCESSING TYPES ---
#
GET     /studies/proctypes/:studyId             org.biobank.controllers.study.ProcessingTypeController.get(studyId, procTypeId: Option[String])
POST    /studies/proctypes/:studyId             org.biobank.controllers.study.ProcessingTypeController.addProcessingType(studyId)
PUT     /studies/proctypes/:studyId/:id         org.biobank.controllers.study.ProcessingTypeController.updateProcessingType(studyId, id)
DELETE  /studies/proctypes/:studyId/:id/:ver    org.biobank.controllers.study.ProcessingTypeController.removeProcessingType(studyId, id, ver: Long)

#
# --- SPECIMEN LINK TYPES ---
#
GET     /studies/proctypes/sltypes/:procTypeId            org.biobank.controllers.study.SpecimenLinkTypeController.get(procTypeId, slTypeId: Option[String])
POST    /studies/proctypes/sltypes/:procTypeId            org.biobank.controllers.study.SpecimenLinkTypeController.addSpecimenLinkType(procTypeId)
PUT     /studies/proctypes/sltypes/:procTypeId/:id        org.biobank.controllers.study.SpecimenLinkTypeController.updateSpecimenLinkType(procTypeId, id)
DELETE  /studies/proctypes/sltypes/:procTypeId/:id/:ver   org.biobank.controllers.study.SpecimenLinkTypeController.removeSpecimenLinkType(procTypeId, id, ver: Long)

#
# --- STUDY DTOs ---
#
GET     /studies/names                          org.biobank.controllers.study.StudiesController.listNames(filter: Option[String], order: Option[String])

#
# --- STUDIES ---
#
GET     /studies                                org.biobank.controllers.study.StudiesController.list(filter: Option[String], status: Option[String], sort: Option[String], page: Option[Int], pageSize: Option[Int], order: Option[String])
POST    /studies                                org.biobank.controllers.study.StudiesController.add
GET     /studies/:id                            org.biobank.controllers.study.StudiesController.get(id)
POST    /studies/name/:id                       org.biobank.controllers.study.StudiesController.updateName(id)
POST    /studies/description/:id                org.biobank.controllers.study.StudiesController.updateDescription(id)
POST    /studies/pannottype/:id                 org.biobank.controllers.study.StudiesController.addAnnotationType(id)
POST    /studies/pannottype/:id/:uniqueId       org.biobank.controllers.study.StudiesController.updateAnnotationType(id, uniqueId)
DELETE  /studies/pannottype/:id/:ver/:uniqueId  org.biobank.controllers.study.StudiesController.removeAnnotationType(id, ver: Long, uniqueId)
POST    /studies/enable/:id                     org.biobank.controllers.study.StudiesController.enable(id)
POST    /studies/disable/:id                    org.biobank.controllers.study.StudiesController.disable(id)
POST    /studies/retire/:id                     org.biobank.controllers.study.StudiesController.retire(id)
POST    /studies/unretire/:id                   org.biobank.controllers.study.StudiesController.unretire(id)

#
# --- COLLECTION EVENTS --- order matters: this section must be before participants
#
GET     /participants/cevents/list/:participantId               org.biobank.controllers.participants.CollectionEventsController.list(participantId, sort: Option[String], page: Option[Int], pageSize: Option[Int], order: Option[String])
GET     /participants/cevents/visitNumber/:participantId/:vn    org.biobank.controllers.participants.CollectionEventsController.getByVisitNumber(participantId, vn: Int)
GET     /participants/cevents/:ceventId                         org.biobank.controllers.participants.CollectionEventsController.get(ceventId)
POST    /participants/cevents/:participantId                    org.biobank.controllers.participants.CollectionEventsController.add(participantId)
POST    /participants/cevents/visitNumber/:ceventId             org.biobank.controllers.participants.CollectionEventsController.updateVisitNumber(ceventId)
POST    /participants/cevents/timeCompleted/:ceventId           org.biobank.controllers.participants.CollectionEventsController.updateTimeCompleted(ceventId)
POST    /participants/cevents/annot/:ceventId                   org.biobank.controllers.participants.CollectionEventsController.addAnnotation(ceventId)
DELETE  /participants/cevents/annot/:ceventId/:annotTypeId/:ver org.biobank.controllers.participants.CollectionEventsController.removeAnnotation(ceventId, annotTypeId, ver: Long)
DELETE  /participants/cevents/:participantId/:ceventId/:ver     org.biobank.controllers.participants.CollectionEventsController.remove(participantId, ceventId, ver: Long)

#
# --- SPECIMENS ---
#
GET     /participants/cevents/spcs/get/:spcId                   org.biobank.controllers.participants.SpecimensController.get(spcId)
GET     /participants/cevents/spcs/invid/:invId                 org.biobank.controllers.participants.SpecimensController.getByInventoryId(invId)
GET     /participants/cevents/spcs/:ceventId                    org.biobank.controllers.participants.SpecimensController.list(ceventId, status: Option[String], sort: Option[String], page: Option[Int], pageSize: Option[Int], order: Option[String])
POST    /participants/cevents/spcs/:ceventId                    org.biobank.controllers.participants.SpecimensController.addSpecimens(ceventId)
DELETE  /participants/cevents/spcs/:ceventId/:spcId/:ver        org.biobank.controllers.participants.SpecimensController.removeSpecimen(ceventId, spcId, ver: Long)

#
# --- PARTICIPANTS ---
#
GET     /participants/uniqueId/:studyId/:id       org.biobank.controllers.participants.ParticipantsController.getByUniqueId(studyId, id)
GET     /participants/:studyId/:id                org.biobank.controllers.participants.ParticipantsController.get(studyId, id)
POST    /participants/:studyId                    org.biobank.controllers.participants.ParticipantsController.add(studyId)
POST    /participants/uniqueId/:id                org.biobank.controllers.participants.ParticipantsController.updateUniqueId(id)
POST    /participants/annot/:id                   org.biobank.controllers.participants.ParticipantsController.addAnnotation(id)
DELETE  /participants/annot/:id/:annotTypeId/:ver org.biobank.controllers.participants.ParticipantsController.removeAnnotation(id, annotTypeId, ver: Long)

#
# --- CENTRE LOCATION ---
#
POST    /centres/locations/:centreId                   org.biobank.controllers.centres.CentresController.addLocation(centreId)
POST    /centres/locations/:centreId/:locationId       org.biobank.controllers.centres.CentresController.updateLocation(centreId, locationId)
DELETE  /centres/locations/:centreId/:ver/:locationId  org.biobank.controllers.centres.CentresController.removeLocation(centreId, ver: Long, locationId)

#
# --- CENTRE TO STUDY LINK ---
#
POST    /centres/studies/:centreId               org.biobank.controllers.centres.CentresController.addStudy(centreId)
DELETE  /centres/studies/:centreId/:ver/:studyId org.biobank.controllers.centres.CentresController.removeStudy(centreId, ver: Long, studyId)

#
# --- CENTRE DTOs ---
#
GET     /centres/names                          org.biobank.controllers.centres.CentresController.listNames(filter, order)
GET     /centres/locations                      org.biobank.controllers.centres.CentresController.locations()

#
# --- CENTRES ---
#
GET     /centres/counts                         org.biobank.controllers.centres.CentresController.centreCounts()
GET     /centres/:id                            org.biobank.controllers.centres.CentresController.query(id)
GET     /centres                                org.biobank.controllers.centres.CentresController.list(filter: Option[String], status: Option[String], sort: Option[String], page: Option[Int], pageSize: Option[Int], order: Option[String])
POST    /centres                                org.biobank.controllers.centres.CentresController.add
POST    /centres/name/:id                       org.biobank.controllers.centres.CentresController.updateName(id)
POST    /centres/description/:id                org.biobank.controllers.centres.CentresController.updateDescription(id)
POST    /centres/studies/:id                    org.biobank.controllers.centres.CentresController.addStudy(id)
POST    /centres/locations/:id                  org.biobank.controllers.centres.CentresController.addLocation(id)
POST    /centres/enable/:id                     org.biobank.controllers.centres.CentresController.enable(id)
POST    /centres/disable/:id                    org.biobank.controllers.centres.CentresController.disable(id)
DELETE  /centres/studies/:id/:ver/:studyId      org.biobank.controllers.centres.CentresController.removeStudy(id, ver: Long, studyId)
DELETE  /centres/locations/:id/:ver/:uniqueId   org.biobank.controllers.centres.CentresController.removeLocation(id, ver: Long, uniqueId)

#
# --- SHIPMENTS ---
#
POST    /shipments                              org.biobank.controllers.centres.ShipmentsController.add
POST    /shipments/courier/:id                  org.biobank.controllers.centres.ShipmentsController.updateCourier(id)
POST    /shipments/trackingnumber/:id           org.biobank.controllers.centres.ShipmentsController.updateTrackingNumber(id)
POST    /shipments/fromlocation/:id             org.biobank.controllers.centres.ShipmentsController.updateFromLocation(id)
POST    /shipments/tolocation/:id               org.biobank.controllers.centres.ShipmentsController.updateToLocation(id)
POST    /shipments/packed/:id                   org.biobank.controllers.centres.ShipmentsController.packed(id)
POST    /shipments/sent/:id                     org.biobank.controllers.centres.ShipmentsController.sent(id)
POST    /shipments/received/:id                 org.biobank.controllers.centres.ShipmentsController.received(id)
POST    /shipments/unpacked/:id                 org.biobank.controllers.centres.ShipmentsController.unpacked(id)
POST    /shipments/lost/:id                     org.biobank.controllers.centres.ShipmentsController.lost(id)
GET     /shipments/specimens/:shId/:shSpcId     org.biobank.controllers.centres.ShipmentsController.getSpecimen(shId, shSpcId)
GET     /shipments/specimens/:id                org.biobank.controllers.centres.ShipmentsController.listSpecimens(id, sort, page: Int, pageSize: Int, order)
GET     /shipments/:id                          org.biobank.controllers.centres.ShipmentsController.get(id)
GET     /shipments                              org.biobank.controllers.centres.ShipmentsController.list(courierFilter: Option[String], trackingNumberFilter: Option[String], sort: Option[String], page: Option[Int], pageSize: Option[Int], order: Option[String])

#
# --- USERS ---
#
GET     /users/counts                           org.biobank.controllers.UsersController.userCounts()
GET     /users                                  org.biobank.controllers.UsersController.list(nameFilter: Option[String], emailFilter: Option[String], status: Option[String], sort: Option[String], page: Option[Int], pageSize: Option[Int], order: Option[String])
GET     /users/:id                              org.biobank.controllers.UsersController.user(id)
POST    /users                                  org.biobank.controllers.UsersController.registerUser
POST    /users/name/:id                         org.biobank.controllers.UsersController.updateName(id)
POST    /users/email/:id                        org.biobank.controllers.UsersController.updateEmail(id)
POST    /users/password/:id                     org.biobank.controllers.UsersController.updatePassword(id)
POST    /users/avatarurl/:id                    org.biobank.controllers.UsersController.updateAvatarUrl(id)
POST    /users/activate/:id                     org.biobank.controllers.UsersController.activateUser(id)
POST    /users/lock/:id                         org.biobank.controllers.UsersController.lockUser(id)
POST    /users/unlock/:id                       org.biobank.controllers.UsersController.unlockUser(id)

GET     /users/studies/:id                      org.biobank.controllers.UsersController.userStudies(id, query: Option[String], sort: Option[String], order: Option[String])

#
# --- AUTHENTICATION ---
#
GET     /authenticate                           org.biobank.controllers.UsersController.authenticateUser
POST    /login                                  org.biobank.controllers.UsersController.login
POST    /logout                                 org.biobank.controllers.UsersController.logout
POST    /passreset                              org.biobank.controllers.UsersController.passwordReset

#
# --- DTOs ---
#
GET     /counts                                 org.biobank.controllers.Application.aggregateCounts

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                           controllers.Assets.versioned(path="/public", file)
