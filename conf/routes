# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index
GET     /about                      controllers.Application.about
GET     /contact                    controllers.Application.contact

# studies
GET     /study                      controllers.study.StudyController.index  
GET     /study/show/:id             controllers.study.StudyController.showStudy(id:String)
GET     /study/add                  controllers.study.StudyController.addStudy 
POST    /study/add                  controllers.study.StudyController.addStudySubmit
GET     /study/update/:id           controllers.study.StudyController.updateStudy(id:String)
POST    /study/update/:id           controllers.study.StudyController.updateStudySubmit(id:String)

# specimen groups
GET     /study/sg/show/:studyId/:studyName          controllers.study.SpecimenGroupController.index(studyId:String,studyName:String)
GET     /study/sg/add/:studyId/:studyName           controllers.study.SpecimenGroupController.addSpecimenGroup(studyId:String, studyName:String)
POST    /study/sg/add                               controllers.study.SpecimenGroupController.addSpecimenGroupSubmit
GET     /study/sg/update/:studyId/:studyName/:sgId  controllers.study.SpecimenGroupController.updateSpecimenGroup(studyId:String, studyName: String, sgId:String)
POST    /study/sg/update                            controllers.study.SpecimenGroupController.updateSpecimenGroupSubmit
GET     /study/sg/remove/:studyId/:studyName/:sgId  controllers.study.SpecimenGroupController.removeSpecimenGroupConfirm(studyId:String, studyName: String, sgId:String)
POST    /study/sg/remove                            controllers.study.SpecimenGroupController.removeSpecimenGroupSubmit

# collection event annotation types
GET     /study/cevent/annot/show/:studyId/:studyName                controllers.study.CeventAnnotTypeController.index(studyId:String, studyName:String)
GET     /study/cevent/annot/add/:studyId/:studyName                 controllers.study.CeventAnnotTypeController.addAnnotationType(studyId:String, studyName:String)
POST    /study/cevent/annot/add                                     controllers.study.CeventAnnotTypeController.addAnnotationTypeSubmit
GET     /study/cevent/annot/update/:studyId/:studyName/:annotId     controllers.study.CeventAnnotTypeController.updateAnnotationType(studyId:String, studyName: String, annotId: String)
POST    /study/cevent/annot/update                                  controllers.study.CeventAnnotTypeController.updateAnnotationTypeSubmit
GET     /study/cevent/annot/remove/:studyId/:studyName/:annotId     controllers.study.CeventAnnotTypeController.removeAnnotationTypeConfirm(studyId:String, studyName: String, annotId: String)
POST     /study/cevent/annot/remove                                 controllers.study.CeventAnnotTypeController.removeAnnotationTypeSubmit

# collection event types
GET     /study/cetype                   controllers.study.CeventTypeController.index(studyId:String,studyName:String)
GET     /study/cetype/add/:studyId      controllers.study.CeventTypeController.addCeventType(studyId:String)
POST    /study/cetype/addSubmit         controllers.study.CeventTypeController.addCeventTypeSubmit(studyId:String, studyName:String)
GET     /study/cetype/update            controllers.study.CeventTypeController.updateCeventType(studyId:String, studyName: String, ceTypeId: String)
POST    /study/cetype/updateSubmit      controllers.study.CeventTypeController.updateCeventTypeSubmit(id:String, studyName:String)
GET     /study/cetype/removeConfirm     controllers.study.CeventTypeController.removeCeventTypeConfirm(studyId:String, studyName: String, ceTypeId: String)
GET     /study/cetype/remove            controllers.study.CeventTypeController.removeCeventType(studyId:String, studyName: String, ceTypeId: String)

# user
GET     /user/profile               controllers.UserController.profile

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling (only needed if you are using UsernamePasswordProvider)
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange


# Providers entry points
GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

GET     /assets/stylesheets/img/glyphicons-halflings-white.png      controllers.Assets.at(path="/public", file="/images/glyphicons-halflings-white.png")
GET     /assets/stylesheets/img/glyphicons-halflings.png            controllers.Assets.at(path="/public", file="/images/glyphicons-halflings.png")

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
