# Configuration

admin.email="biobank2@gmail.com"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="TsLWj4[^1N<7nrI/>EkyPDTO[dnh<7_R[j;cN0:lGK6Mm`0048C@3PK]4KR6HobL"

# The application languages
# ~~~~~
#application.langs="en,de,pl,fr,es"
application.langs="en"

play.http.filters = "org.biobank.Filters"

# when set to true, the actors will load test data
application.testData.load = true
application.testData.loadSpecimens = true

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=org.h2.Driver
db.default.user=sa
db.default.password=""
db.default.logStatements=true

slick.default="org.biobank.query.model.*"

# enable evolutions by default
applyEvolutions.default=false

# Default database configuration using H2 database engine in an in-memory mode
db.default.url="jdbc:h2:mem:bbweb;MODE=MYSQL"

# Default database configuration using H2 database engine in a persistent mode
#db.default.url="jdbc:h2:tcp://localhost/bbweb-db-file;MODE=MYSQL"

# Logger
# ~~~~~
# see logger.xml file in the conf directory .

# mail
include "email.conf"

play.modules.enabled += "org.biobank.modules.AkkaModule"

akka.default-dispatcher.core-pool-size-max = 64
akka.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on

akka {
  loggers = ["akka.event.Logging$DefaultLogger"]

  jvm-exit-on-fatal-error = on

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto
    }
  }

  debug {
    # enable function of LoggingReceive, which is to log any received message at
    # DEBUG level
    receive = off

    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
    autoreceive = off

    # enable DEBUG logging of actor lifecycle changes
    lifecycle = off

    # enable DEBUG logging of subscription changes on the eventStream
    event-stream = off
  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.journal.leveldb.dir = "target/bbweb/journal"
akka.persistence.snapshot-store.local.dir = "target/bbweb/snapshots"
akka.persistence.journal.leveldb.native = true

# Configuration for the LeveldbReadJournal
akka.persistence.query.journal.leveldb {
  # Implementation class of the LevelDB ReadJournalProvider
  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

  # Absolute path to the write journal plugin configuration entry that this
  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
  # If undefined (or "") it will connect to the default journal as specified by the
  # akka.persistence.journal.plugin property.
  write-plugin = ""

  # The LevelDB write journal is notifying the query side as soon as things
  # are persisted, but for efficiency reasons the query side retrieves the events
  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
  refresh-interval = 3s

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = 100
}
