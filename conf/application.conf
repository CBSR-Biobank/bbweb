# Configuration

include "testdata.conf"
include "email.conf"

app {
    version = "0.0.0.7"
}

admin.email="biobank2@gmail.com"
admin.url="biobbank.com"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!

# Uncomment this line if you want to set secret via environment vars
play.crypto.secret=${?APPLICATION_SECRET}

play.server.http.idleTimeout = 60s
play.server.requestTimeout = 40s

# The application languages
# ~~~~~
#play.i18n.langs="en,de,pl,fr,es"
play.i18n.langs=[ "en" ]

play.filters.enabled += "play.filters.gzip.GzipFilter"

play.filters.disabled += "play.filters.csrf.CSRFFilter"

play.filters.gzip {

    contentType {

        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = [ "text/*", "application/javascript", "application/json" ]

        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
    }
}

play.filters.headers.contentSecurityPolicy = "script-src 'self' 'unsafe-inline' clef.io jquery.min.js;"

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=org.h2.Driver
db.default.user=sa
db.default.password=""
db.default.logStatements=true

slick.default="org.biobank.query.model.*"

# enable evolutions by default
applyEvolutions.default=false

# Default database configuration using H2 database engine in an in-memory mode
db.default.url="jdbc:h2:mem:bbweb;MODE=MYSQL"

# Default database configuration using H2 database engine in a persistent mode
#db.default.url="jdbc:h2:tcp://localhost/bbweb-db-file;MODE=MYSQL"

# Logger
# ~~~~~
# see logger.xml file in the conf directory .

play.modules.enabled += "org.biobank.modules.AkkaModule"
play.modules.enabled += "org.biobank.modules.BbwebModule"

akka.default-dispatcher.core-pool-size-max = 64
akka.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  loggin  g-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  jvm-exit-on-fatal-error = on

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  actor {
    serialize-messages = off

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto
    }
  }

  debug {
    # enable function of LoggingReceive, which is to log any received message at
    # DEBUG level
    receive = off

    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
    autoreceive = off

    # enable DEBUG logging of actor lifecycle changes
    lifecycle = off

    # enable DEBUG logging of subscription changes on the eventStream
    event-stream = off
  }
}

akka {
  persistence {
    journal.plugin = "akka-persistence-sql-async.journal"
    snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"
  }
}

akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

  user = "bbweb_user"
  password = "bbweb_pwd"
  url = "jdbc:mysql://localhost/bbweb"
  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "persistence_metadata"
  journal-table-name = "persistence_journal"
  snapshot-table-name = "persistence_snapshot"
}

#akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
#akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
#akka.persistence.journal.leveldb.dir = "target/bbweb/journal"
#akka.persistence.snapshot-store.local.dir = "target/bbweb/snapshots"
#akka.persistence.journal.leveldb.native = true

## Configuration for the LeveldbReadJournal
#akka.persistence.query.journal.leveldb {
#  # Implementation class of the LevelDB ReadJournalProvider
#  class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"
#
#  # Absolute path to the write journal plugin configuration entry that this
#  # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
#  # If undefined (or "") it will connect to the default journal as specified by the
#  # akka.persistence.journal.plugin property.
#  write-plugin = ""
#
#  # The LevelDB write journal is notifying the query side as soon as things
#  # are persisted, but for efficiency reasons the query side retrieves the events
#  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
#  refresh-interval = 3s
#
#  # How many events to fetch in one query (replay) and keep buffered until they
#  # are delivered downstreams.
#  max-buffer-size = 100
#}

bbweb-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}
